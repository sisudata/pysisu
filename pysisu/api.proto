//
// Copyright 2022 Sisu Data, Inc

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package sisu.v1.api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// Request parameters for get analysis results.
message AnalysesResultRequest {
  // A limit on the number of objects to be returned, between 1 and 100. Default value is 100.
  google.protobuf.UInt64Value limit = 1;
  // starting_after is an object ID that defines your place in the list.
  // For instance, if you make a analysis list request and receive 100, ending with id = 89,
  // your subsequent call can include starting_after=89 in order to fetch the next page of the list.
  google.protobuf.Int64Value starting_after = 2;
  // Formats the return as a csv.
  google.protobuf.BoolValue csv = 3;
  // filter by only top driver results
  google.protobuf.StringValue top_drivers = 4;
}

// Type of Analysis eg. KEY_DRIVER.
enum AnalysisType {
  ANALYSIS_TYPE_UNKNOWN = 0;
  ANALYSIS_TYPE_KEY_DRIVER = 1;
  ANALYSIS_TYPE_TREND = 2;
}

// Request parameters for get analysis list.
message ListAnalysesRequest {
  // What type of analyses to include in the results. If not set
  // all types will be returned.
  AnalysisType analysis_type = 1;
  // A limit on the number of objects to be returned, between 1 and 100. Default value is 100.
  google.protobuf.UInt64Value limit = 2;
  // starting_after is an object ID that defines your place in the list.
  // For instance, if you make a analysis list request and receive 100, ending with id = 89,
  // your subsequent call can include starting_after=89 in order to fetch the next page of the list.
  google.protobuf.Int64Value starting_after = 3;
}

// ListAnalysesResponse provides list of Analyses.
message ListAnalysesResponse {
  // List of analyses.
  repeated Analysis analyses = 1;
  PaginationHints pagination_hints = 2;
}

// Provides detailed information about an analysis.
message Analysis {
  // Analysis id.
  int64 id = 1;
  // Analysis name.
  string name = 2;
  // Type of Analysis eg. TYPE_KEY_DRIVER.
  AnalysisType type = 3;
  // Timestamp when the analysis was created.
  google.protobuf.Timestamp created_at = 4;
}

// Request payload for execute analysis workflow.
message RunAnalysisRequest {
  // Analysis id.
  int64 id = 1;
}

// Response message execute analysis workflow returns empty message 
message RunAnalysisResponse {
}
// Pagination hints which indicate if more data is available 
// next_starting_cursor indicate the next id to be used for starting_after pagination parameter
message PaginationHints {
  bool has_more = 1;
  google.protobuf.Int64Value next_starting_cursor = 2;
}

// Response payload for get LatestAnalysisResult.
message LatestAnalysisResultResponse {
  // Analysis Result.
  AnalysisResult analysis_result = 1;
  PaginationHints pagination_hints = 2;
}

// Provides details of an analysis run.
message AnalysisResult {
  // The run ID Analysis run. Run ID's are unique across analyses.
  // example: 102940
  int64 id = 1;
  // Status of running an analysis.
  enum RunStatus {
    RUN_STATUS_UNKNOWN = 0;
    // Analysis is currently running.
    RUN_STATUS_IN_FLIGHT = 1;
    // Analysis finished running but had errors.
    RUN_STATUS_FAILED = 2;
    // Analysis ran successfully.
    RUN_STATUS_COMPLETED = 3;
  }
  // Indicates if analysis run completed successfully or not.
  RunStatus run_status = 2;
  // Time at which run was kicked off.
  google.protobuf.Timestamp requested_at = 3;
  // Time at which analysis run completed.
  google.protobuf.Timestamp completed_at = 4;
  // Either SCHEDULED or MANUAL.
  enum RunType {
    RUN_TYPE_UNKNOWN = 0;
    RUN_TYPE_SCHEDULED = 1;
    RUN_TYPE_MANUAL = 2;
  }
  RunType run_type = 5;
  // Result that is specific to the analysis type.
  oneof run_result {
    KeyDriverAnalysisResult key_driver_analysis_result = 6;
    TrendAnalysisResult trend_analysis_result = 7;
  }
}

// Provides details of a key driver analysis run.
message KeyDriverAnalysisResult {
  // If subtype is TIME_COMPARISON, metadata about the time periods that are compared.
  message TimeComparison {
    // The earlier of the two periods being compared.
    TimeRange previous_period = 1;
    // The more recent of the two periods being compared.
    TimeRange recent_period = 2;
  }
  // If subtype is GROUP_COMPARISON metadata about the groups that are being compared.
  message GroupComparison {
    message GroupDescription {
      // The user-defined name corresponding to the first group.
      string name = 1;
    }
    // The first group.
    GroupDescription group_a = 1;
    // The second group.
    GroupDescription group_b = 2;
  }
  // If subtype is General Performance.
  message GeneralPerformance {}
  // Details of one of the type.
  oneof comparison {
    // If subtype is TIME_COMPARISON, metadata about the time periods that are compared.
    TimeComparison time_comparison = 6;
    // If subtype is GROUP_COMPARISON metadata about the groups that are being compared.
    GroupComparison group_comparison = 7;
    // If the subtype is General_Performance.
    GeneralPerformance general_performance = 8;
  }

  // Subgroup of a key driver analysis run.
  message Subgroup {
    // If analysis type is GROUP_COMPARISON the metric value and size of the compared subgroups.
    message GroupComparisonPerformance {
      // The size of this subgroup in the first group.
      google.protobuf.DoubleValue group_a_size = 1;
      // The size of this subgroup in the second group.
      google.protobuf.DoubleValue group_b_size = 2;
      // The value of the metric for this of this subgroup in the first group.
      google.protobuf.DoubleValue group_a_value = 3;
      // The value of the metric for this of this subgroup in the second group.
      google.protobuf.DoubleValue group_b_value = 4;
    }
    // If analysis type is TIME_COMPARISON,  the metric value and size of the compared subgroups.
    message TimeComparisonPerformance {
      //The size of this subgroup in the earlier of the compared periods.
      google.protobuf.DoubleValue previous_period_size = 1;
      // The size of this subgroup in the more recent of the compared periods.
      google.protobuf.DoubleValue recent_period_size = 2;
      // The value of the metric for this of this subgroup in the earlier of the compared periods.
      google.protobuf.DoubleValue previous_period_value = 3;
      // The value of the metric for this of this subgroup in the more recent of the compared periods.
      google.protobuf.DoubleValue recent_period_value = 4;
    }
    // If analysis type is GENERAL_PERFORMANCE the metric value and size for this subgroup.
    message GeneralPerformance {
      // The size (in percent) of this subgroup relative to the overall population.
      google.protobuf.DoubleValue size = 1;
      // The metric value corresponding to this subgroup.
      google.protobuf.DoubleValue value = 2;
    }

    // Unique ID corresponding to each subgroup, unique per analysis run.
    int64 id = 1;
    // Is top driver for this subgroup.
    google.protobuf.BoolValue is_top_driver = 2;
    // The factors that define this subgroup, represented as a map of Dimension to Value.
    map<string, Factor> factors = 3;
    oneof details {
      GroupComparisonPerformance group_comparison = 4;
      TimeComparisonPerformance time_comparison = 5;
      GeneralPerformance general_performance = 6;
    }
  }
  //Array of the subgroups selected by the key driver algorithm.
  repeated Subgroup subgroups = 9;
}

// Provides details of a Trend Analysis result.
message TrendAnalysisResult {
  // Provides fields that describes the trend.
  message Trend {
    // Inclusive start and exclusive end time range.
    TimeRange time_range = 1;
    // Y-intersept of the trend.
    optional double intercept = 2;
    // Steepness of trend.
    optional double slope = 3;
    // The size (in percent) of this trend relative to the overall population.
    optional double size = 4;
  }
  // Metric level trends.
  repeated Trend overall_trends = 1;

  // Subgroup of an trend analysis run.
  message Subgroup {
    // Unique ID corresponding to each subgroup, unique per analysis run.
    int64 id = 1;
    // The factors that define this subgroup, represented as a map of Dimension to Value.
    map<string, Factor> factors = 2;
    // Trends for the subgroup.
    repeated Trend trends = 4;
  }
  // Array of the subgroups in the trend.
  repeated Subgroup subgroups = 2;
}

// TimeRange start and end details with inclusive start and exclusive end.
message TimeRange {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}

// (Dimension, Value) pairs that define a subgroup.
message Factor {
  // Value FactorType.
  message Value {
    oneof value_type {
      bool boolean_value = 1;
      int64 integer_value = 2;
      string string_value = 3;
      double float_value = 4;
      google.protobuf.Timestamp timestamp_value = 5;
    }
  }
  // Keyword FactorType.
  message Keyword {
    string keyword = 1;
  }
  // Bin FactorType.
  message Bin {
    // The inclusive lower bound of the bin.
    google.protobuf.DoubleValue lower_bound = 1;
    // The exclusive upper bound of the bin.
    google.protobuf.DoubleValue upper_bound = 2;
    // The percentile of `lower_bound` within the factor's dimension.
    google.protobuf.DoubleValue lower_bound_percentile = 3;
    // The percentile of `upper_bound` within the factor's dimension.
    google.protobuf.DoubleValue upper_bound_percentile = 4;
  }
  // What type of filter to apply to the dimension to define this subgroup.
  oneof factor_type {
    // Value, it is either string, int, boolean, float or timestamp type.
    Value value = 1;
    // Keyword in a text dimension.
    Keyword keyword = 2;
    //bin of a numerical dimension.
    Bin bin = 3;
  }
}